<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://www.javiergamazo.com//blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.javiergamazo.com//blog/" rel="alternate" type="text/html" /><updated>2020-12-23T17:33:55+00:00</updated><id>https://www.javiergamazo.com//blog/feed.xml</id><title type="html">DidYouKnow</title><subtitle>The place where I talk about anything</subtitle><entry><title type="html">¿Puede una IA inventar un idioma?</title><link href="https://www.javiergamazo.com//blog/ia/2020/12/23/discussing_es_1.html" rel="alternate" type="text/html" title="¿Puede una IA inventar un idioma?" /><published>2020-12-23T09:00:00+00:00</published><updated>2020-12-23T09:00:00+00:00</updated><id>https://www.javiergamazo.com//blog/ia/2020/12/23/discussing_es_1</id><content type="html" xml:base="https://www.javiergamazo.com//blog/ia/2020/12/23/discussing_es_1.html">&lt;p&gt;La pregunta que encabeza este post es recurrente en todos los círculos de la Inteligencia Artificial. Aquellos que trabajan en NLP (procesamiento de lenguaje natural por sus siglas en inglés) buscan concebir sistemas que sean capaces de entender - procesar - lenguaje producido por seres humanos y tomar acciones acordes. GPT-3 es un ejemplo de esto, el cometido de este modelo tan solo es predecir (aunque muy acertadamente) la palabra más probable que seguirá una secuencia de texto &lt;a class=&quot;citation&quot; href=&quot;#Brown2020&quot;&gt;(Brown et al.)&lt;/a&gt;. Sin embargo, por cómo ha sido entrenado, en ningún caso se puede defender que el modelo posea una comprensión profunda de las palabras que está produciendo ni que tenga un objetivo en particular al expresarlas. Si se me permite mi opinión, creo que el salto que nos queda por delante hasta cubrir este último punto es todavía enorme y no vendrá en los próximos años. Al fin y al cabo, todavía no entendemos cómo funciona la mente humana.&lt;/p&gt;

&lt;p&gt;Es por tanto relevante saber a qué nos referimos con “idioma” o “lenguaje” cuando hablemos de ello en este post. Nos estaremos refiriendo a un lenguaje común que compartan varios sistemas a través del cual puedan llegar a entenderse y transmitir ideas. No obstante, estas ideas vendrán predefinidas por un agente externo a la IA. Un ejemplo básico podría ser transmitir un número aleatorio de 0 a 9 del sistema A al B en un lenguaje común, que el B lo procesara, calculara su doble, lo devolviera a A y éste diera con la respuesta correcta. En este post intentaremos sentar las bases de un proyecto que cumpla todos esos requisitos y una condición más: que el idioma que compartan ambos sistemas sea similar al del droide R2-D2 de Star Wars.&lt;/p&gt;

&lt;h3 id=&quot;dos-no-hablan-si-uno-no-quiere&quot;&gt;Dos no hablan si uno no quiere&lt;/h3&gt;

&lt;p&gt;Efectivamente, para que exista comunicación debe haber al menos dos sistemas: un emisor de información (transmisor) y otro receptor de la misma. Siguiendo la Teoría de la Comunicación de Claude E. Shannon &lt;a class=&quot;citation&quot; href=&quot;#Shannon1948&quot;&gt;(Shannon)&lt;/a&gt;, es necesario además una fuente de información, un canal, un mensaje, un destinatario y un elemento de ruido. Si bien la definición precisa de estos componentes se deja a discreción del lector, es de capital importancia para este proyecto distinguir entre &lt;span style=&quot;color:blue&quot;&gt;fuente de información&lt;/span&gt; y &lt;span style=&quot;color:red&quot;&gt;transmisor&lt;/span&gt;, y &lt;span style=&quot;color:blue&quot;&gt;destinatario&lt;/span&gt; y &lt;span style=&quot;color:red&quot;&gt;receptor&lt;/span&gt;: cuando hablamos de transmisor nos referimos al sistema técnico encargado de &lt;em&gt;codificar&lt;/em&gt; la fuente de información a un conjunto de señales aptas para el canal (y viceversa para el receptor, que la &lt;em&gt;decodifica&lt;/em&gt; para que el destinatario pueda utilizar la información). Aplicado a la comunicación verbal entre dos personas A y B, la fuente de información será la idea de A, cuyo cerebro se encargará de codificar en forma de palabras - mensaje - que se enviarán por el aire - canal - hasta llegar a B. El cerebro de B decodificará las palabras y generará una idea, que en el mejor de los casos será igual a la idea del cerebro de A.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/1.discussing/images/information_theory_diagram_es.png&quot; alt=&quot;Information theory&quot; class=&quot;image-centered&quot; width=&quot;700px&quot; /&gt;
&lt;em&gt;Figura 1: Diagrama de la teoría de la información de Shannon. Adaptado de &lt;a class=&quot;citation&quot; href=&quot;#Shannon1948&quot;&gt;(Shannon)&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Transformemos ahora esta teoría al campo de la IA. Como sabemos, las redes neuronales son tremendamente eficaces a la hora de generar representaciones a partir de datos, por lo que podríamos enfrentar dos de ellas (sujetos A y B) y hacerlas compartir mensajes. A codificaría el mensaje y B lo… ¿decodificaría? ¿Y qué pasaría si B quisiera transmitir una idea a A? Para encontrar la solución a esta pregunta podemos fijarnos en el sistema más eficiente que conocemos a la hora de producir y procesar lenguaje: el cerebro. Este órgano se encarga de ambas funciones simultáneamente (¿o es que no puedes escuchar música y hablar a la vez?), y eso se debe a que el flujo de información transcurre por zonas separadas&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Estas dos zonas son el área de Wernicke y el área de Broca, que se encargan de la comprensión y de la producción del lenguaje respectivamente &lt;a class=&quot;citation&quot; href=&quot;#Neil2012&quot;&gt;(Neil)&lt;/a&gt;. Siguiendo este ejemplo, parece lógico hacer que nuestros sujetos estén formados por dos redes diferentes y desconectadas. Una de estas redes, el &lt;em&gt;encoder&lt;/em&gt; se encargará de producir el lenguaje mientras que el &lt;em&gt;decoder&lt;/em&gt; tratará de comprenderlo. En caso de que A quiera transmitir una idea a B, será el &lt;em&gt;encoder&lt;/em&gt; de A el responsable de transformar esta idea a un lenguaje común y el &lt;em&gt;decoder&lt;/em&gt; de B lo interpretará.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/1.discussing/images/estructura.png&quot; alt=&quot;Estructura&quot; width=&quot;500px&quot; class=&quot;image-centered&quot; /&gt;
&lt;em&gt;Figura 2: Estructura de un sistema con dos individuos.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;hablemos-tan-claro-como-r2-d2&quot;&gt;Hablemos tan claro como R2-D2&lt;/h3&gt;

&lt;p&gt;Describiré en primer lugar la forma de comunicarse de R2-D2 para aquellos que la desconozcan. Se trata de una serie de pitidos, silbidos y otros sonidos aglutinados para formar algo que se asemeja a frases &lt;a class=&quot;citation&quot; href=&quot;#Bray2015&quot;&gt;(Bray et al.)&lt;/a&gt;. En YouTube hay &lt;a href=&quot;https://www.youtube.com/watch?v=2-BKjnAgNgY&quot; target=&quot;_blank&quot;&gt;infinidad&lt;/a&gt; de vídeos mostrando estos sonidos (se abre en otra pestaña). Intentaremos hacer que las redes neuronales imiten este lenguaje a la hora de hablar, forzando que la representación de la idea por parte del &lt;em&gt;encoder&lt;/em&gt; sea también una serie de pitidos. Sin embargo, forzar este tipo de representación no es trivial por dos motivos: en primer lugar, el lenguaje debe ser creado espontáneamente a través de la conversación entre las redes, no debe existir ningún tipo de interacción humana en este proceso. En segundo lugar, debemos definir a qué nos referimos con “representación” en este contexto puesto que el lenguaje es muy variado. Abordaremos primero la segunda cuestión, lo que nos llevará inexorablemente hasta la solución de la primera.&lt;/p&gt;

&lt;p&gt;Un sonido puede ser representado de tres formas diferentes en función de lo que busquemos conocer acerca del mismo:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Representación temporal:&lt;/strong&gt; muestra la intensidad del sonido en función del tiempo.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Representación en frecuencias:&lt;/strong&gt; explicado muy brevemente, todo sonido, por el hecho de ser una onda en función del tiempo, puede ser descompuesto en ondas más básicas con diferentes frecuencias. El método con el que pasamos de una onda en el dominio temporal a una onda en el dominio de frecuencias recibe el nombre de &lt;em&gt;transformada de Fourier&lt;/em&gt;. La representación en frecuencias contiene información de lo importante (amplitud) que es cada frecuencia para dar lugar al sonido subyacente.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Representación en forma de espectrograma:&lt;/strong&gt; las dos representaciones anteriores tienen dos dimensiones, i.e. amplitud en función del tiempo o amplitud de cada frecuencia. Sin embargo, podemos unir ambas para dar lugar a una representación tridimensional: tiempo, amplitud y frecuencia. Un espectrograma muestra la evolución de la frecuencia y de la intensidad en el tiempo. Típicamente, la intensidad se define por el color, mientras que el tiempo toma el eje de abscisas y la frecuencia, el de ordenadas. A diferencia de en los casos anteriores, un espectrograma puede ser guardado en forma de imagen ya que la informaciónm relevante está codificada tanto en el color de los píxeles como en su posición. La siguiente figura muestra el espectrograma de un fragmento de la voz de R2-D2&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/1.discussing/images/espectrograma.png&quot; alt=&quot;Espectrograma&quot; class=&quot;image-centered&quot; /&gt;
&lt;em&gt;Figura 3: Espectrograma de un sonido producido por R2-D2. Se ha calculado tomando la transformada de Fourier de todo el audio del vídeo en &lt;a href=&quot;https://www.youtube.com/watch?v=2-BKjnAgNgY&quot;&gt;https://www.youtube.com/watch?v=2-BKjnAgNgY&lt;/a&gt; y dividiendo el resultado en imágenes de 256 píxeles.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Se ha demostrado que las redes neuronales operan bien con datos tabulados y especialmente bien con imágenes &lt;a class=&quot;citation&quot; href=&quot;#Krizhevsky2012&quot;&gt;(Krizhevsky et al.)&lt;/a&gt;&lt;a class=&quot;citation&quot; href=&quot;#He2016&quot;&gt;(He et al.)&lt;/a&gt;, así que parece lógico utilizar el espectograma para esta tarea. En general, para trabajar con imágenes se utilizan redes neuronales convolucionales. Explicar en detalle cómo funcionan este tipo de redes daría para otro artículo, por lo que se deja al lector interesado el familiarizarse con este tipo de arquitecturas, ya que existen multitud de recursos disponibles (&lt;a class=&quot;citation&quot; href=&quot;#DotCSV2020&quot;&gt;(Dot CSV)&lt;/a&gt;, &lt;a class=&quot;citation&quot; href=&quot;#Cs231n&quot;&gt;(Stanford)&lt;/a&gt; [en inglés], por ejemplo). Tan solo diré aquí que con una red de capas convolucionales podemos obtener una representación en varias dimensiones de los datos de entrada (una imagen). Es decir, podemos conseguir la traducción de un número cualquiera en una imagen, y esta traducción puede ser aprendida para una tarea concreta.&lt;/p&gt;

&lt;h3 id=&quot;un-poco-de-arquitectura&quot;&gt;Un poco de arquitectura&lt;/h3&gt;

&lt;p&gt;Una vez abordados todos los aspectos técnicos del problema nos centraremos en definir la arquitectura del sistema y la forma de entrenamiento. Determinar la arquitectura de las redes generalmente tiene más de arte que de ciencia, por lo que no me explayaré en los detalles. En primer lugar, codificaremos la idea (el número) de forma &lt;em&gt;One-Hot&lt;/em&gt;, lo que significa que para transmitir un dígito de entre \( N \) posibles utilizaremos un vector de \( N \) componentes con cero en todas ellas y un uno en la componente relevante. Por ejemplo, el vector para el número 1 en el intervalo \( [0, 4] \) será \([0, 1, 0, 0, 0]\). Para utilizar estos datos con redes convolucionales deberemos transformarlos a tres dimensiones \( (C\times H\times W ) \), aumentando en primer lugar la cantidad de componentes con al menos una capa &lt;em&gt;fully connected&lt;/em&gt; y redimensionando el resultado. Posteriormente, añadiremos capas convolucionales de forma que el resultado sea un mapa de las dimensiones del espectrograma que buscamos. Como la tarea que buscamos resolver es simétrica (el &lt;em&gt;encoder&lt;/em&gt; y el &lt;em&gt;decoder&lt;/em&gt; deben realizar tareas opuestas), optaremos por arquitecturas simétricas para estas dos redes. Si hemos dicho que el &lt;em&gt;encoder&lt;/em&gt; empezará con una capa &lt;em&gt;fully connected&lt;/em&gt; seguida de capas convolucionales, el &lt;em&gt;decoder&lt;/em&gt; empezará por capas convolucionales y por último otra &lt;em&gt;fully connected&lt;/em&gt;. De esta forma, el diagrama anterior adquiere la siguiente estructura:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/1.discussing/images/estructura_espectrograma_es.png&quot; alt=&quot;Estructura con espectrograma&quot; width=&quot;650px&quot; class=&quot;image-centered&quot; /&gt;
&lt;em&gt;Figura 3: Estructura de un sistema con dos individuos en el que se envía el número 1. Solo se muestra una parte del sistema (conexión de A con B) por simplicidad.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Para hacer que un sistema de redes neuronales se comporte de una forma determinada se debe especificar una cantidad a minimizar. A esta cantidad se le llama &lt;em&gt;loss&lt;/em&gt;, y en muchos casos es una función que depende de la salida de la red y de los datos originales &lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Aplicado a nuestro problema, podemos definir inmdieatamente una cantidad que el sistema debe minimizar: queremos que B interprete la misma idea que está intentando transmitir A. Como solo hay un número correcto cada vez, el problema es multiclase (predecir un número y solo uno de entre diez posibles) y minimizaremos la &lt;em&gt;Cross-Entropy loss&lt;/em&gt;, definida como:
\[ L_{CE} = - \sum_i^C t_i \log(s_i),\]
donde \( C \) son las clases posibles y \( t_i \) y \( s_i \) representan la etiqueta real y la predicha por la red respectivamente &lt;a class=&quot;citation&quot; href=&quot;#Gomez2018&quot;&gt;(Gómez)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Minimizando la &lt;em&gt;Cross-Entropy loss&lt;/em&gt; conseguimos que las dos redes se pongan de acuerdo en el número que están transmitiendo. Es importante puntualizar que tan solo minimizando esta cantidad las redes ya crearían un lenguaje interno a la salida del &lt;em&gt;encoder&lt;/em&gt;, pero éste sería probablemente aleatorio. Como queremos que utilicen la voz de R2-D2, tendremos que añadir una función de &lt;em&gt;loss&lt;/em&gt; más y lo haremos… con estilo.&lt;/p&gt;

&lt;h3 id=&quot;hablando-con-estilo&quot;&gt;Hablando con estilo&lt;/h3&gt;

&lt;p&gt;Como se ha explicado más arriba, el lenguaje debe ser creado espontáneamente y sin interacción humana, y para ello la representación en forma de espectrograma nos puede ayudar. Como es evidente, no podemos forzar que la salida del &lt;em&gt;encoder&lt;/em&gt; sea igual (píxel a píxel) a un espectrograma concreto ni a un grupo de estos puesto que estaríamos violando el segundo supuesto del problema (existiría en ese caso fuerte interacción humana). Necesitaremos entonces una función de &lt;em&gt;loss&lt;/em&gt; menos intrusiva, que no busque diferencias por píxel sino algo más general. Por suerte, en 2015 se introdujo un tipo de &lt;em&gt;loss&lt;/em&gt; idóneo para este caso de uso: la &lt;em&gt;loss&lt;/em&gt; de estilo &lt;a class=&quot;citation&quot; href=&quot;#Gatys2015&quot;&gt;(Gatys et al.)&lt;/a&gt;. Intuitivamente, esta &lt;em&gt;loss&lt;/em&gt; se calcula haciendo pasar las imágenes por una red neuronal preentrenada (VGG) y comparando las representaciones intermedias de la imagen objetivo y la imagen generada. Los autores aplican esta idea para transferir el estilo de un cuadro a una foto, manteniendo intacta la idea subyacente de la foto original. Para quien esté interesado, matemáticamente tiene este aspecto con \( l \) representaciones intermedias:&lt;/p&gt;

&lt;p&gt;\[ L_{estilo} = \sum_l w^lL_{estilo}^l,   \]
\[ L_{estilo}^l = \dfrac{1}{M^l} \sum_{ij} (G_{ij}^l(s) - G_{ij}^l(g))^2,   \]
donde \( G(s) \) y \( G(g) \) se refieren a la matriz de Gram de la imagen estilo y la imagen generada respectivamente. Para más información, creo que &lt;a href=&quot;https://towardsdatascience.com/light-on-math-machine-learning-intuitive-guide-to-neural-style-transfer-ef88e46697ee&quot;&gt;este artículo&lt;/a&gt; puede ser interesante.&lt;/p&gt;

&lt;p&gt;Podemos utilizar la &lt;em&gt;loss&lt;/em&gt; de estilo para inducir que la salida del &lt;em&gt;encoder&lt;/em&gt; sea similar a los espectrogramas de referencia. Con ello presumiblemente conseguiremos que los sonidos se mantengan aleatorios pero nos recuerden a los del droide de las películas. No obstante, esta función no puede ser aplicada a &lt;em&gt;encoder&lt;/em&gt; y &lt;em&gt;decoder&lt;/em&gt; por igual. Puesto que solo el &lt;em&gt;encoder&lt;/em&gt; participa en el proceso de creación del lenguaje, es el único que debe recibir &lt;em&gt;feedback&lt;/em&gt; en ese aspecto. Sin embargo, la idea debe fluir a través de ambas redes, por lo que la &lt;em&gt;Cross-Entropy loss&lt;/em&gt; se debe propagar por todo el sistema. Así, las funciones en cada caso resultan:
\[ L_{decoder} = L_{CE} = - \sum_i^C t_i \log(s_i),\]
\[ L_{encoder} = L_{CE} + \lambda L_{estilo} = - \sum_i^C t_i \log(s_i) + \lambda \sum_l w^l \dfrac{1}{M^l} \sum_{ij} (G_{ij}^l(s) - G_{ij}^l(g))^2\]&lt;/p&gt;

&lt;p&gt;Y el sistema total queda como en la Figura 4:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blog/assets/1.discussing/images/estructura_loss_es.png&quot; alt=&quot;Estructura con loss&quot; width=&quot;650px&quot; class=&quot;image-centered&quot; /&gt;
&lt;em&gt;Figura 4: Propagación y cálculo de las funciones de _loss_ a través del sistema. En negro, propagación hacia delante. En rojo, propagación de las funciones de loss hacia atrás.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Solo restaría elegir una estrategia de entrenamiento. Como se ha descrito más arriba, cada sujeto está formado por dos redes con cometidos diferentes y cada comunicación enfrenta partes distintas de cada sujeto. Por lo tanto, con \( N \) sujetos tendremos \( 2N \) redes y \( N^2 \) formas de enfrentarlas (contando con que queremos que un sujeto pueda entenderse a sí mismo). Para entrenar a todos los sujetos a la vez y evitar que algunas redes adquieran más nivel que otras tendremos que seguir una estrategia escalonada, alternando los pasos de entrenamiento entre todas las combinaciones. Así, tanto el tiempo como la complejidad del entrenamiento crecen con \( \mathcal{O}(N^2) \).&lt;/p&gt;

&lt;p&gt;Hasta aquí la primera parte de este artículo sobre cómo idear un sistema de redes neuronales del que pueda emerger un lenguaje común y cómo hacer que este lenguaje tenga la forma que queramos. En la segunda parte se explorarán los resultados y otras estrategias de entrenamiento en función de estos. Además, se incluirá una fuente de ruido para hacer el entrenamiento más robusto.&lt;/p&gt;

&lt;hr /&gt;

&lt;hr /&gt;

&lt;ol class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;Brown2020&quot;&gt;Brown, Tom B., et al. &lt;i&gt;Language Models Are Few-Shot Learners&lt;/i&gt;. May 2020, https://arxiv.org/abs/2005.14165.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Shannon1948&quot;&gt;Shannon, C. E. “A Mathematical Theory of Communication.” &lt;i&gt;Bell System Technical Journal&lt;/i&gt;, 1948, doi:10.1002/j.1538-7305.1948.tb01338.x.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Neil2012&quot;&gt;Neil, Carlson. “Physiology of Behavior.” &lt;i&gt;IEEE Transactions on Information Theory&lt;/i&gt;, 2012.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Bray2015&quot;&gt;Bray, Adam, et al. &lt;i&gt;Star Wars: Absolutely Everything You Need to Know&lt;/i&gt;. DK Children, 2015, p. 200.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Krizhevsky2012&quot;&gt;Krizhevsky, Alex, et al. “ImageNet Classification with Deep Convolutional Neural Networks.” &lt;i&gt;Advances in Neural Information Processing Systems&lt;/i&gt;, 2012, doi:10.1061/(ASCE)GT.1943-5606.0001284.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;He2016&quot;&gt;He, Kaiming, et al. “Deep Residual Learning for Image Recognition.” &lt;i&gt;Proceedings of the IEEE Computer Society Conference on Computer Vision and Pattern Recognition&lt;/i&gt;, 2016, doi:10.1109/CVPR.2016.90.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;DotCSV2020&quot;&gt;Dot CSV. &lt;i&gt;¿Qué Es Una Red Neuronal Convolucional? Los OJOS De La Inteligencia Artificial - YouTube&lt;/i&gt;. 2020, https://www.youtube.com/watch?v=V8j1oENVz00.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Cs231n&quot;&gt;Stanford, Cs231n. &lt;i&gt;CS231n Convolutional Neural Networks for Visual Recognition&lt;/i&gt;. https://cs231n.github.io/convolutional-networks/. Accessed December 21, 2020.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Gomez2018&quot;&gt;Gómez, Raúl. &lt;i&gt;Understanding Categorical Cross-Entropy Loss, Binary Cross-Entropy Loss, Softmax Loss, Logistic Loss, Focal Loss and All Those Confusing Names&lt;/i&gt;. May 2018, https://gombru.github.io/2018/05/23/cross_entropy_loss/.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;Gatys2015&quot;&gt;Gatys, Leon, et al. “A Neural Algorithm of Artistic Style.” &lt;i&gt;Journal of Vision&lt;/i&gt;, 2015, doi:10.1167/16.12.326.&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;En realidad el área de Wernicke y el área de Broca están conectadas por el fascículo arqueado &lt;a class=&quot;citation&quot; href=&quot;#Neil2012&quot;&gt;(Neil)&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Solo se muestra la magnitud en este espectrograma. Para calcularlo hay que tomar la transformada de Fourier de la señal, y eso lleva aparejada una fase que no se menciona aquí pero que es fundamental para hacer la transformada inversa después. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Esto aplica en modelos supervisados, en los que conocemos el valor que debería predecir el modelo para cada valor de entrada. Existen otros tipos de algoritmos (no supervisados, por ejemplo), en los que esto no se cumple y la función de &lt;em&gt;loss&lt;/em&gt; adquiere otras formas. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="IA" /><category term="IA" /><category term="imagen" /><category term="lenguaje" /><summary type="html">La pregunta que encabeza este post es recurrente en todos los círculos de la Inteligencia Artificial. Aquellos que trabajan en NLP (procesamiento de lenguaje natural por sus siglas en inglés) buscan concebir sistemas que sean capaces de entender - procesar - lenguaje producido por seres humanos y tomar acciones acordes. GPT-3 es un ejemplo de esto, el cometido de este modelo tan solo es predecir (aunque muy acertadamente) la palabra más probable que seguirá una secuencia de texto (Brown et al.). Sin embargo, por cómo ha sido entrenado, en ningún caso se puede defender que el modelo posea una comprensión profunda de las palabras que está produciendo ni que tenga un objetivo en particular al expresarlas. Si se me permite mi opinión, creo que el salto que nos queda por delante hasta cubrir este último punto es todavía enorme y no vendrá en los próximos años. Al fin y al cabo, todavía no entendemos cómo funciona la mente humana.</summary></entry></feed>